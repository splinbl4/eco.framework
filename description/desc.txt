Установка пакета "roave/security-advisories" для защиты от небезапасных пакетов.
Настройка автозагрузки классов черех composer согласно psr-4.
Установка и настройка "phpunit/phpunit".
Установка пакетов "zendframework/zend-diactoros", "zendframework/zend-httphandlerrunner" для работы с HTTP.
Установка и настройка "aura/router" для маршрутизации.
Написание тестовых маршрутов.
Написание адаптера для своего роута (принцип D из SOLID). Теперь можно подключить любой роутер psr-7 не изменяя код
фреймворка, а только написать адаптер для подключаемового роута.
Установка пакетов для Middleware и Pipeline.
Написание Middleware и Pipeline.
Установка пакетов "psr/container", "zendframework/zend-config-aggregator", "zendframework/zend-httphandlerrunner"
для конфигурации приложения и для контейнера зависимостей.
Настройка конфигурации приложения. Все локальные настройку берутся из *.local.php и local.php.
Написание своего php шаблонизатора для вывода html шаблонов.
Настройка подключения шаблонизатора через интерфейс.
Подключение пакета twig/twig.
Настройка шаблонизатора twig в конфигах.
Подключение шаблонизатора twig через контейнер.
Подключение своих расширений для шаблонизатора twig.
Подключение и настройка пакета "filp/whoops" для вывода ошибок
Подключение пакета "monolog/monolog" для логирования
Модификация ErrorHandlerMiddleware для его расширения и подключения обработчиков (принцип SO из SOLID)
Разделение конфигурации на прод и дев
Создание отдельных классов-фабрик для конфигупации контейнера
Подключение пакета "squizlabs/php_codesniffer"
Проверка и исправления кодстайла с помощью codesniffer
Установка пакета symfony/console
Настройка symfony/console
Установка пакета fzaninotto/faker для генерации тестовых данных
Установка пакета dasprid/container-interop-doctrine для подключения doctrine через psr контейнер. В пакете уже создана
фабрика подключения.
Установка пакета doctrine/migrations
Установка пакета doctrine/data-fixtures для добавления тестлвых данных в бд


Создание сущности Game с полями.
Создание сущности GameResult с полями.
Создание шаблонов для главной страницы, формы.
Создание контроллера для вывода главной страницы с формой.
Создание контроллера для обработки формы и создании игры.
Установка пакета aura/filter для валидации данных
Создание класса для валидации полей формы для создания игры
Вывод ошибок в шаблоне
Создание сервиса для сущности игры (метод для заполнения полей сущности и записи в базу).
Создание абстрактной сущности Eco с общими полями для всех сущностей в эко-системе.
Создание абстрактной сущности Animal наследуемой от Eco с общими полями для животных.
Создание абстрактной сущности Plants наследуемой от Eco с общими полями для растений.
Создание сущности Plant наследуемой от Plants.
Создание сущностей Herbivore, LargePredator, SimplePredator наследуемой от Animal.
Создание сущностей Observer наследуемой от Eco.
Создание базового класса коллекции с методами.
Создание коллекции с сущностями. Создание коллекции с помощью статического метода.
Создание сервисов для животных с общим интерфейсом, чтобы внедрить его в конструктор класса Animal. Затем при создании
животного подсовывать нужный сервис в конструктор.
Создание вспомогательного класса Location, который берет на себя работу с перемещениями и установкой координат для
сущностей на поле.
Создание сервсиса GameResultService, который записывает в базу результаты игры
Создание сервсиса GameService, который записывает в базу игру и несет в себе основную логику игры.
Создание сервсиса ObserverService.
